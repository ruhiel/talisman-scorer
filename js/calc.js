var listArray = [
    [
        '超会心,抜刀術【技】,達人芸,匠,心眼,ランナー,集中,攻めの守勢,砲術,貫通弾・貫通矢強化,散弾・拡散矢強化,装填拡張,速射強化,幸運,キノコ大好き,ジャンプ鉄人,攻撃,フルチャージ,逆恨み,死中に活,火事場力,挑戦者,弱点特効,見切り,渾身,力の解放,会心撃【属性】,麻痺属性強化,睡眠属性強化,爆破属性強化,業物,剛刃研磨,スタミナ急速回復,弾丸節約,通常弾・連射矢強化,特殊射撃強化,弾道強化,砲弾装填,ガード性能,ガード強化,強化持続,鬼火纏,逆襲,鈍器使い,抜刀術【力】,火属性攻撃強化,水属性攻撃強化,雷属性攻撃強化,氷属性攻撃強化,龍属性攻撃強化,毒属性強化,KO術,納刀術,高速変形,反動軽減,装填速度,ブレ抑制,防御,精霊の加護,気絶耐性,属性やられ耐性,砥石使用高速化,ひるみ軽減,回避性能,回避距離UP,耳栓,風圧耐性,耐震,早食い,破壊王,広域化,泡沫の舞,不屈,滑走強化,火耐性,水耐性,雷耐性,氷耐性,龍耐性,毒耐性,麻痺耐性,睡眠耐性,爆破やられ耐性,泥雪耐性,腹減り耐性,体術,壁面移動,体力回復量UP,回復速度,アイテム使用強化,満足感,植生学,地質学,ボマー,剥ぎ取り鉄人,飛び込み,陽動,乗り名人,翔蟲使い,スタミナ奪取,笛吹き名人',
        '超会心,抜刀術【技】,達人芸,匠,心眼,ランナー,集中,攻めの守勢,砲術,貫通弾・貫通矢強化,散弾・拡散矢強化,装填拡張,速射強化,幸運,キノコ大好き,ジャンプ鉄人,攻撃,フルチャージ,逆恨み,死中に活,火事場力,挑戦者,弱点特効,見切り,渾身,力の解放,会心撃【属性】,麻痺属性強化,睡眠属性強化,爆破属性強化,業物,剛刃研磨,スタミナ急速回復,弾丸節約,通常弾・連射矢強化,特殊射撃強化,弾道強化,砲弾装填,ガード性能,ガード強化,強化持続,鬼火纏,逆襲,鈍器使い,抜刀術【力】,火属性攻撃強化,水属性攻撃強化,雷属性攻撃強化,氷属性攻撃強化,龍属性攻撃強化,毒属性強化,KO術,納刀術,高速変形,反動軽減,装填速度,ブレ抑制,防御,精霊の加護,気絶耐性,属性やられ耐性,砥石使用高速化,ひるみ軽減,回避性能,回避距離UP,耳栓,風圧耐性,耐震,早食い,破壊王,広域化,泡沫の舞,不屈,滑走強化,火耐性,水耐性,雷耐性,氷耐性,龍耐性,毒耐性,麻痺耐性,睡眠耐性,爆破やられ耐性,泥雪耐性,腹減り耐性,体術,壁面移動,体力回復量UP,回復速度,アイテム使用強化,満足感,植生学,地質学,ボマー,剥ぎ取り鉄人,飛び込み,陽動,乗り名人,翔蟲使い,スタミナ奪取,笛吹き名人'
    ],
    [
        '超会心,抜刀術【技】,達人芸,匠,心眼,ランナー,集中,攻めの守勢,砲術,貫通弾・貫通矢強化,散弾・拡散矢強化,装填拡張,速射強化,幸運,キノコ大好き,ジャンプ鉄人,攻撃,フルチャージ,逆恨み,死中に活,火事場力,挑戦者,弱点特効,見切り,渾身,力の解放,会心撃【属性】,麻痺属性強化,睡眠属性強化,爆破属性強化,業物,剛刃研磨,スタミナ急速回復,弾丸節約,通常弾・連射矢強化,特殊射撃強化,弾道強化,砲弾装填,ガード性能,ガード強化,強化持続,鬼火纏,逆襲,鈍器使い,抜刀術【力】,KO術,納刀術,高速変形,反動軽減,装填速度,ブレ抑制,防御,精霊の加護,気絶耐性,属性やられ耐性,砥石使用高速化,ひるみ軽減,回避性能,回避距離UP,耳栓,風圧耐性,耐震,早食い,破壊王,広域化,泡沫の舞,不屈,滑走強化,水耐性,雷耐性,氷耐性,龍耐性,毒耐性,麻痺耐性,腹減り耐性,体術,壁面移動,体力回復量UP,回復速度,アイテム使用強化,満足感,植生学,剥ぎ取り鉄人,乗り名人,翔蟲使い,スタミナ奪取,笛吹き名人',
        '超会心,抜刀術【技】,達人芸,匠,心眼,ランナー,集中,攻めの守勢,砲術,貫通弾・貫通矢強化,散弾・拡散矢強化,装填拡張,速射強化,幸運,キノコ大好き,ジャンプ鉄人,攻撃,フルチャージ,逆恨み,死中に活,火事場力,挑戦者,弱点特効,見切り,渾身,力の解放,会心撃【属性】,麻痺属性強化,睡眠属性強化,爆破属性強化,業物,剛刃研磨,スタミナ急速回復,弾丸節約,通常弾・連射矢強化,特殊射撃強化,弾道強化,砲弾装填,ガード性能,ガード強化,強化持続,鬼火纏,逆襲,鈍器使い,抜刀術【力】,KO術,納刀術,高速変形,反動軽減,装填速度,ブレ抑制,防御,精霊の加護,気絶耐性,属性やられ耐性,砥石使用高速化,ひるみ軽減,回避性能,回避距離UP,耳栓,風圧耐性,耐震,早食い,破壊王,広域化,泡沫の舞,不屈,滑走強化,腹減り耐性,体術,壁面移動,体力回復量UP,回復速度,アイテム使用強化,満足感,剥ぎ取り鉄人,乗り名人,翔蟲使い,スタミナ奪取,笛吹き名人'
    ]
];
var rankMap = {
    'S': ['超会心', '抜刀術【技】', '達人芸', '匠', '心眼', 'ランナー', '集中', '攻めの守勢', '砲術', '貫通弾・貫通矢強化', '散弾・拡散矢強化', '装填拡張', '速射強化', '幸運', 'キノコ大好き', 'ジャンプ鉄人'],
    'A': ['攻撃', 'フルチャージ', '逆恨み', '死中に活', '火事場力', '挑戦者', '弱点特効', '見切り', '渾身', '力の解放', '会心撃【属性】', '麻痺属性強化', '睡眠属性強化', '爆破属性強化', '業物', '剛刃研磨', 'スタミナ急速回復', '弾丸節約', '通常弾・連射矢強化', '特殊射撃強化', '弾道強化', '砲弾装填', 'ガード性能', 'ガード強化', '強化持続', '鬼火纏'],
    'B': ['逆襲', '鈍器使い', '抜刀術【力】', '火属性攻撃強化', '水属性攻撃強化', '雷属性攻撃強化', '氷属性攻撃強化', '龍属性攻撃強化', '毒属性強化', 'KO術', '納刀術', '高速変形', '反動軽減', '装填速度', 'ブレ抑制', '防御', '精霊の加護', '気絶耐性', '属性やられ耐性', '砥石使用高速化', 'ひるみ軽減', '回避性能', '回避距離UP', '耳栓', '風圧耐性', '耐震', '早食い', '破壊王', '広域化', '泡沫の舞'],
    'C': ['不屈', '滑走強化', '火耐性', '水耐性', '雷耐性', '氷耐性', '龍耐性', '毒耐性', '麻痺耐性', '睡眠耐性', '爆破やられ耐性', '泥雪耐性', '腹減り耐性', '体術', '壁面移動', '体力回復量UP', '回復速度', 'アイテム使用強化', '満足感', '植生学', '地質学', 'ボマー', '剥ぎ取り鉄人', '飛び込み', '陽動', '乗り名人', '翔蟲使い', 'スタミナ奪取', '笛吹き名人']
};
var rateMap = {
    'S': [[0.95, 0.05], [1]],
    '砲弾装填': [[0.9, 0.1], [1]],
    'ガード強化|特殊射撃強化|通常弾・連射矢強化': [[0.6, 0.4], [1]],
    'フルチャージ|死中に活|弱点特効|渾身|会心撃【属性】|麻痺属性強化|睡眠属性強化|爆破属性強化|業物|剛刃研磨|スタミナ急速回復|弾丸節約|弾道強化|強化持続|鬼火纏': [[0.6, 0.4], [0.9, 0.1]],
    '攻撃|逆恨み|火事場力|挑戦者|見切り|力の解放|ガード性能': [[0.6, 0.3, 0.1], [0.9, 0.1]],
    'ブレ抑制': [[0.7, 0.3], [0.8, 0.1]],
    '泥雪耐性': [[0.7, 0.3], [0.7, 0.3]],
    '精霊の加護': [[0.75, 0.2, 0.05], [0.8, 0.2]],
    '鈍器使い|耳栓': [[0.75, 0.2, 0.05], [0.75, 0.25]],
    '火属性攻撃強化|水属性攻撃強化|雷属性攻撃強化|氷属性攻撃強化|龍属性攻撃強化|毒属性強化': [[0.5, 0.35, 0.15], [0.7, 0.3]],
    '防御': [[0.6, 0.35, 0.05], [0.9, 0.05, 0.05]],
    '水耐性|雷耐性|氷耐性|龍耐性|毒耐性|麻痺耐性|睡眠耐性|翔蟲使い': [[0.86, 0.09, 0.05], [0.5, 0.45, 0.05]],
    '逆襲|抜刀術【力】|納刀術|KO術|気絶耐性|高速変形|反動軽減|装填速度|砥石使用高速化|ひるみ軽減|回避性能|回避距離UP|風圧耐性|耐震|早食い|破壊王|広域化|泡沫の舞': [[0.5, 0.45, 0.05], [0.75, 0.25]],
    '火耐性|爆破やられ耐性|体力回復量UP|回復速度|体術|スタミナ奪取|地質学|ボマー|アイテム使用強化|満足感|腹減り耐性|壁面移動': [[0.5, 0.45, 0.05], [0.5, 0.45, 0.05]],
    '植生学': [[0.5, 0.35, 0.1, 0.05], [0.5, 0.35, 0.1, 0.05]],
    '滑走強化|ジャンプ鉄人|飛び込み|乗り名人|剥ぎ取り鉄人|剥ぎ取り名人|笛吹き名人|不屈|捕獲名人|弓溜め段階解放|陽動': [[1], [1]]
};
var rankRate = {
    'S': [0.03, 0.05],
    'A': [0.15, 0.2],
    'B': [0.52, 0.5],
    'C': [0.3, 0.25]
};
var secondSkillRate = {
    'S': [0.2, 0.1],
    'A': [0.4, 0.2],
    'B': [1, 1],
    'C': [1, 1]
};
var slotRate = {
    'SS': { '000': 0.2625, '100': 0.2906, '110': 0.0896, '111': 0.0073, '200': 0.1181, '210': 0.0538, '211': 0.0048, '300': 0.1162, '310': 0.0525, '311': 0.0046 },
    'AS': { '000': 0.2625, '100': 0.2906, '110': 0.0896, '111': 0.0073, '200': 0.1181, '210': 0.0538, '211': 0.0048, '300': 0.1162, '310': 0.0525, '311': 0.0046 },
    'BS': { '000': 0.2438, '100': 0.2931, '110': 0.0975, '111': 0.009, '200': 0.1219, '210': 0.0563, '211': 0.0052, '300': 0.1162, '310': 0.0525, '311': 0.0046 },
    'CS': { '000': 0.2438, '100': 0.2931, '110': 0.0975, '111': 0.009, '200': 0.1219, '210': 0.0563, '211': 0.0052, '300': 0.1162, '310': 0.0525, '311': 0.0046 },
    'S': { '000': 0.1937, '100': 0.2958, '110': 0.1271, '111': 0.0167, '200': 0.1094, '210': 0.0646, '211': 0.0094, '300': 0.1094, '310': 0.0646, '311': 0.0094 },
    'AB': { '000': 0.1937, '100': 0.2958, '110': 0.1271, '111': 0.0167, '200': 0.1094, '210': 0.0646, '211': 0.0094, '300': 0.1094, '310': 0.0646, '311': 0.0094 },
    'AC': { '000': 0.1937, '100': 0.2958, '110': 0.1271, '111': 0.0167, '200': 0.1094, '210': 0.0646, '211': 0.0094, '300': 0.1094, '310': 0.0646, '311': 0.0094 },
    'AA': { '000': 0.2188, '100': 0.2917, '110': 0.1104, '111': 0.0125, '200': 0.1156, '210': 0.0604, '211': 0.0073, '300': 0.1156, '310': 0.0604, '311': 0.0073 },
    'A': { '000': 0.1625, '100': 0.2979, '110': 0.15, '111': 0.0229, '200': 0.0969, '210': 0.0729, '211': 0.0135, '300': 0.0969, '310': 0.0729, '311': 0.0135 },
    'BB': { '000': 0.0938, '100': 0.2104, '110': 0.125, '111': 0.0208, '200': 0.1313, '210': 0.1437, '211': 0.0292, '220': 0.0375, '221': 0.0083, '300': 0.0813, '310': 0.0687, '311': 0.0125, '320': 0.0312, '321': 0.0063 },
    'BC': { '000': 0.0938, '100': 0.2104, '110': 0.125, '111': 0.0208, '200': 0.1313, '210': 0.1437, '211': 0.0292, '220': 0.0375, '221': 0.0083, '300': 0.0813, '310': 0.0687, '311': 0.0125, '320': 0.0312, '321': 0.0063 },
    'B': { '000': 0.0938, '100': 0.2083, '110': 0.1292, '111': 0.0229, '200': 0.125, '210': 0.1458, '211': 0.0333, '220': 0.0354, '221': 0.0104, '300': 0.0771, '310': 0.0708, '311': 0.0146, '320': 0.0292, '321': 0.0083 },
    'CC': { '000': 0.0687, '100': 0.1771, '110': 0.1104, '111': 0.0188, '200': 0.1313, '210': 0.1437, '211': 0.0292, '220': 0.0375, '221': 0.0083, '300': 0.0813, '310': 0.0687, '311': 0.0125, '320': 0.0312, '321': 0.0063 },
    'C': { '000': 0.0646, '100': 0.175, '110': 0.1146, '111': 0.0208, '200': 0.125, '210': 0.1458, '211': 0.0333, '220': 0.0417, '221': 0.0125, '300': 0.1021, '310': 0.0917, '311': 0.0188, '320': 0.0417, '321': 0.0125 }
};

function getSkillRank(skill) {
    for (let key in rankMap) {
        if (rankMap[key].includes(skill)) {
            return key;
        }
    }

    return '';
}
function getSkillRate(skill) {
    for (let key in rateMap) {
        if (key.indexOf(skill) > -1) {
            return rateMap[key];
        }
    }

    var rank = getSkillRank(skill);
    if (rateMap[rank]) {
        return rateMap[rank];
    }

    return [[1], [1]];
}

function countRankSkill(rank, index) {
    var count = 0;
    var type = $('#typeselect option:selected').val();

    var array = listArray[type][index].split(',');
    for (var i = 0; i < array.length; i++) {
        if(getSkillRank(array[i]) == rank) {
            count++;
        }
    }

    return count;
}

function comma(num) {
    return String(num).replace( /(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
}
function getRankText(score) {
    if(score.gte(100000000)) {
        return "神おま(UR)";
    } else if(score.gte(10000000)) {
        return "神おま(SSR)";
    } else if(score.gte(1000000)) {
        return "神おま(SR)";
    } else if(score.gte(100000)) {
        return "強おま(R)";
    } else {
        return "並おま(C)";
    }
}
function rateCalc() {
    var result = BigNumber(1);
    var skill1name = $('#skill1 option:selected').text();
    var skill2name = $('#skill2 option:selected').text();
    var skill1lv = $('#skilllv1 option:selected').val();
    var skill2lv = $('#skilllv2 option:selected').val();
    var skill1rank = getSkillRank(skill1name);
    var skill2rank = getSkillRank(skill2name);
    var type = $('#typeselect option:selected').val();

    var skill1rankRate = rankRate[skill1rank][type];

    result = result.times(skill1rankRate);

    var skill1rate = getSkillRate(skill1name)[0][skill1lv];

    result = result.times(skill1rate);

    var count1 = countRankSkill(skill1rank, 0);

    result = result.div(count1);

    if (skill2name == '---') {
        var num = BigNumber(1).minus(secondSkillRate[skill1rank][type]);
        result = result.times(num);
    } else {
        result = result.times(secondSkillRate[skill1rank][type]);

        var skill2rankRate = rankRate[skill2rank][type];

        result = result.times(skill2rankRate);
    
        var skill2rate = getSkillRate(skill2name)[1][skill2lv];
    
        result = result.times(skill2rate);

        var count2 = countRankSkill(skill2rank, 1);
    
        result = result.div(count2);
    }

    var slottext = $('#slot1 option:selected').val() + $('#slot2 option:selected').val() + $('#slot3 option:selected').val();

    var ranktext = skill1rank + skill2rank;

    ranktext = ranktext.split('').sort().join('');

    var slotrate = slotRate[ranktext][slottext];

    result = result.times(slotrate);

    result = result.dp(11);

    var percent = result.times(100);

    $('#rateinput').val(Num2FracStr(percent.toString()));

    var score = BigNumber(1).div(result);

    $('#scoreinput').val(comma(Num2FracStr(score.toFixed(0).toString())));

    $('#rankinput').val(getRankText(score));
}

function createList(){
    $('#skill1 > option').remove();

    var type = $('#typeselect option:selected').val();

    var $newOption = $("<option selected></option>").val(-1).text('---');
    $('#skill1').append($newOption);

    var list = listArray[type][0].split(',');

    for (var i = 0; i < list.length; i++) {
        var $newOption = $("<option></option>").val(i).text(list[i]);
        $('#skill1').append($newOption);
    }

    $('#skill2 > option').remove();

    var $newOption = $("<option selected></option>").val(-1).text('---');
    $('#skill2').append($newOption);

    list = listArray[type][1].split(',');

    for (var i = 0; i < list.length; i++) {
        var $newOption = $("<option></option>").val(i).text(list[i]);
        $('#skill2').append($newOption);
    }

    $('#skilllv1 > option').remove();
    $('#skilllv2 > option').remove();
    $('#rateinput').val("0");
}

$(document).ready(function () {
    
    $('#skill1').select2({ width: 'resolve' });
    $('#skill2').select2({ width: 'resolve' });

    createList();

    $('.select2').change(function () {
        var idname = $(this).attr('id');
        var skillindexString = idname.replace('skill', '');
        var skillindex = Number(idname.replace('skill', '')) - 1;
        var skillname = $('#' + idname + ' option:selected').text();
        
        $('#skilllv' + skillindexString + ' > option').remove();

        if(skillname != '---') {
            var skillRate = getSkillRate(skillname)[skillindex];

            for (var i = 0; i < skillRate.length; i++) {
                $('#skilllv' + skillindexString).append($('<option>').html("Lv" + (i + 1)).val(i));
            }
        }

    });

    $("#typeselect").change(createList);

    $('select').change(rateCalc);
});